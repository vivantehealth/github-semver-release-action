name: 'GitHub semver release'
description: "GitHub Action to perform a GitHub semantic version release, along with an update to the major version tag"
inputs:
  default-bump:
    description: 'Default semver segment to bump'
    default: 'minor'
    required: false
  v-prefix:
    required: false
    description: 'Whether to prefix the version with a "v"'
    default: 'true'
  create-floating-major-tag:
    required: false
    description: 'Whether to create/update a floating major tag'
    default: 'true'
  create-floating-minor-tag:
    required: false
    description: 'Whether to create/update a floating minor tag'
    default: 'true'
  floating-tag-sha:
    required: false
    description: 'Which git sha to use for the floating tags. Useful for CD workflows where the main branch is pushed just prior to tagging'
    default: ''
  artifacts:
    description: 'Path of artifacts to upload. comma separated list and supports glob patterns'
    required: false
    default: ''
  artifactContentType:
    description: 'The content type of the artifact. Defaults to raw'
    required: false
    default: 'raw'
# Output the major version
outputs:
  major:
    description: 'Major version'
    value: ${{ steps.semver.outputs.major }}
  minor:
    description: 'Minor version in *.* format'
    value: ${{ steps.semver.outputs.minor }}
  # Provide 3 ways to access the new *.*.* version
  patch:
    description: 'The new version'
    value: ${{ steps.tag.outputs.new_tag }}
  version:
    description: 'The new version'
    value: ${{ steps.tag.outputs.new_tag }}
  tag:
    description: 'The new version'
    value: ${{ steps.tag.outputs.new_tag }}
  part:
    description: 'Part of the version that was bumped'
    value: ${{ steps.tag.outputs.part }}

runs:
  using: "composite"
  steps:
    - name: GitHub Tag Bump
      uses: anothrNick/github-tag-action@v1
      id: tag
      env:
        GITHUB_TOKEN: ${{ github.token }}
        DEFAULT_BUMP: ${{ inputs.default-bump }}
        RELEASE_BRANCHES: "main"
        DEFAULT_BRANCH: "main"
        WITH_V: ${{ inputs.v-prefix }}
        DRY_RUN: "true"
    - name: List Release
      if: steps.tag.outputs.part != 'none'
      run: echo "This will create the release '${{ steps.tag.outputs.new_tag }}'"
      shell: bash
    - name: Parse higher semantic versions
      id: semver
      if: steps.tag.outputs.part != 'none'
      shell: bash
      run: |
        TAG="${{ steps.tag.outputs.new_tag }}"
        MINOR="${TAG%.*}"
        MAJOR="${MINOR%.*}"
        echo "major=$(echo $MAJOR)" >> $GITHUB_OUTPUT
        echo "minor=$(echo $MINOR)" >> $GITHUB_OUTPUT
    # from https://github.com/google-github-actions/.github/blob/main/.github/workflows/release.yml
    # current version: https://github.com/google-github-actions/.github/blob/a569c9b05443b682e293700932a0db23ae21c344/.github/workflows/release.yml#L80
    - name: 'Update floating tags'
      uses: 'actions/github-script@v7'
      env:
        # These need to be passed in explicitly. see https://github.com/actions/runner/issues/665
        INPUT_CREATE-FLOATING-MAJOR-TAG: ${{ inputs.create-floating-major-tag }}
        INPUT_CREATE-FLOATING-MINOR-TAG: ${{ inputs.create-floating-minor-tag }}
        INPUT_FLOATING-TAG-SHA: ${{ inputs.floating-tag-sha }}
      if: steps.tag.outputs.part != 'none' && (${{ inputs.create-floating-major-tag }} == 'true' || ${{ inputs.create-floating-minor-tag }} == 'true')
      with:
        script: |-
          // Use the sha override if set, else use the sha that triggered this workflow
          const sha = core.getInput('floating-tag-sha') == '' ? `${{ github.sha }}`: core.getInput('floating-tag-sha');

          if (core.getInput('create-floating-major-tag') == "true") {
            const major = `${{ steps.semver.outputs.major }}`;

            // Try to update the ref first. If that fails, it probably does not
            // exist yet, and we should create it.
            try {
              await github.rest.git.updateRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${major}`,
                sha: sha,
                force: true,
              });
              core.info(`Updated ${major} to ${sha}`);
            } catch(err) {
              core.warning(`Failed to create tag ${major}: ${err}`);
              try {
                await github.rest.git.createRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `refs/tags/${major}`,
                  sha: sha,
                });
                core.info(`Created ${major} pointing to ${sha}`);
              } catch(err) {
                core.error(`Failed to create tag ${major}: ${err}`);
              }
            }
          }

          if (core.getInput('create-floating-minor-tag') == "true") {
            // Do the same for the minor version
            const minor = `${{ steps.semver.outputs.minor }}`;
            try {
              await github.rest.git.updateRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${minor}`,
                sha: sha,
                force: true,
              });
              core.info(`Updated ${minor} to ${sha}`);
            } catch(err) {
              core.warning(`Failed to create tag ${minor}: ${err}`);
              try {
                await github.rest.git.createRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `refs/tags/${minor}`,
                  sha: sha,
                });
                core.info(`Created ${minor} pointing to ${sha}`);
              } catch(err) {
                core.error(`Failed to create tag ${minor}: ${err}`);
              }
            }
          }
    - name: Create Release
      uses: ncipollo/release-action@v1
      if: steps.tag.outputs.part != 'none'
      with:
        artifacts: ${{ inputs.artifacts }}
        artifactContentType: ${{ inputs.artifactContentType }}
        body: ${{ github.event.head_commit.message }}
        tag: ${{ steps.tag.outputs.new_tag }}
        generateReleaseNotes: true
